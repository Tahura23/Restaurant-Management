@model Restaurant_app.Models.MenuItem


@using (Html.BeginForm("Edit", "MenuItems", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="card mt-5 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Edit MenuItem</h4>
        </div>
        <div class="card-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ItemId)
            @Html.HiddenFor(model => model.CreatedAt)
            @Html.HiddenFor(model => model.CreatedBy)
            @Html.HiddenFor(model => model.RestId)
            @Html.HiddenFor(model => model.IsDeleted)

            <div class="form-group">
                @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control" } })

                    @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                <label>Branch</label>
                @Html.DropDownList("BranchId", ViewBag.Branches as List<SelectListItem>, "Select Branch", new { @id = "BranchId", @class = "form-control" })
            </div>

            <div>
                <label>Menu</label>
                @Html.DropDownList("MenuId", ViewBag.Menus as List<SelectListItem>, "Select Menu", new { @id = "MenuId", @class = "form-control" })
            </div>

            <div>
                <label>Item Category</label>
                @Html.DropDownList("CategoryId", ViewBag.ItemCategories as List<SelectListItem>, "Select Category", new { @id = "CategoryId", @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
            @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModifiedAt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModifiedAt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModifiedAt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsDeleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsDeleted)
                    @Html.ValidationMessageFor(model => model.IsDeleted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
            </div>
        </div>*@

            @*<div class="form-group">
            @Html.LabelFor(model => model.RestId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RestId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RestId, "", new { @class = "text-danger" })
            </div>
        </div>*@



            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PreparationTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PreparationTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PreparationTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ItemImage, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <img style="margin-top:-14px;" id="PreviewImage" alt="-" height="80" width="80" />
                    <input type="file" name="ProfilePhoto" id="ProfilePhoto" class="form-control" />
                    @Html.ValidationMessageFor(model => model.ItemImage, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsAvailable)
                        @Html.ValidationMessageFor(model => model.IsAvailable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="card-footer text-end">
                <input type="submit" value="Save" class="btn btn-primary" />
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary ms-2" })
            </div>
        </div>
        </div>
        }

        @*<div>
            @Html.ActionLink("Back to List", "Index")
        </div>*@
        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")

            <script>
                $("#ProfilePhoto").change(function () {
                    readURL(this);
                    function readURL(input) {
                        if (input.files && input.files[0]) {
                            var reader = new FileReader();
                            reader.onload = function (e) {
                                $('#PreviewImage').attr('src', e.target.result);
                            }
                            reader.readAsDataURL(input.files[0]);
                        }
                    }
                });
                $(document).ready(function () {
                    // Fetch menus when a branch is selected
                    $('#BranchId').change(function () {
                        var branchId = $(this).val();
                        if (branchId) {
                            $.getJSON('/MenuItems/GetMenus', { branchId: branchId }, function (data) {
                                var menuDropdown = $('#MenuId');
                                menuDropdown.empty().append('<option value="">Select Menu</option>');
                                $.each(data, function (index, menu) {
                                    menuDropdown.append('<option value="' + menu.MenuId + '">' + menu.MenuName + '</option>');
                                });
                            });
                        }
                    });

                    // Fetch item categories when a menu is selected
                    $('#MenuId').change(function () {
                        var menuId = $(this).val();
                        if (menuId) {
                            $.getJSON('/MenuItems/GetItemCategories', { menuId: menuId }, function (data) {
                                var categoryDropdown = $('#ItemCategoryId');
                                categoryDropdown.empty().append('<option value="">Select Category</option>');
                                $.each(data, function (index, category) {
                                    categoryDropdown.append('<option value="' + category.CategoryId + '">' + category.CategoryName + '</option>');
                                });
                            });
                        }
                    });
                });
            </script>
        }
